-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Javalette.Par where
import Javalette.Abs
import Javalette.Lex
import Javalette.ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&&' { PT _ (TS _ 4) }
  '(' { PT _ (TS _ 5) }
  ')' { PT _ (TS _ 6) }
  '*' { PT _ (TS _ 7) }
  '+' { PT _ (TS _ 8) }
  '++' { PT _ (TS _ 9) }
  ',' { PT _ (TS _ 10) }
  '-' { PT _ (TS _ 11) }
  '--' { PT _ (TS _ 12) }
  '/' { PT _ (TS _ 13) }
  ';' { PT _ (TS _ 14) }
  '<' { PT _ (TS _ 15) }
  '<=' { PT _ (TS _ 16) }
  '=' { PT _ (TS _ 17) }
  '==' { PT _ (TS _ 18) }
  '>' { PT _ (TS _ 19) }
  '>=' { PT _ (TS _ 20) }
  'boolean' { PT _ (TS _ 21) }
  'double' { PT _ (TS _ 22) }
  'else' { PT _ (TS _ 23) }
  'false' { PT _ (TS _ 24) }
  'if' { PT _ (TS _ 25) }
  'int' { PT _ (TS _ 26) }
  'return' { PT _ (TS _ 27) }
  'true' { PT _ (TS _ 28) }
  'void' { PT _ (TS _ 29) }
  'while' { PT _ (TS _ 30) }
  '{' { PT _ (TS _ 31) }
  '||' { PT _ (TS _ 32) }
  '}' { PT _ (TS _ 33) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }
L_quoted { PT _ (TL $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
String  :: { String }  : L_quoted {  $1 }

Program :: { Program }
Program : ListDef { Javalette.Abs.Pdefs $1 }
Def :: { Def }
Def : Type Ident '(' ListArg ')' Blk { Javalette.Abs.DFun $1 $2 $4 $6 }
ListDef :: { [Def] }
ListDef : Def { (:[]) $1 } | Def ListDef { (:) $1 $2 }
Arg :: { Arg }
Arg : Type Ident { Javalette.Abs.ADecl $1 $2 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
Blk :: { Blk }
Blk : '{' ListStm '}' { Javalette.Abs.Block (reverse $2) }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm { flip (:) $1 $2 }
Stm :: { Stm }
Stm : ';' { Javalette.Abs.Empty }
    | Blk { Javalette.Abs.SBlock $1 }
    | Type ListItem ';' { Javalette.Abs.SDecls $1 $2 }
    | Ident '=' Exp ';' { Javalette.Abs.SAss $1 $3 }
    | Ident '++' ';' { Javalette.Abs.SIncr $1 }
    | Ident '--' ';' { Javalette.Abs.SDecr $1 }
    | 'return' Exp ';' { Javalette.Abs.SReturn $2 }
    | 'return' ';' { Javalette.Abs.VRet }
    | 'if' '(' Exp ')' Stm { Javalette.Abs.SIf $3 $5 }
    | 'if' '(' Exp ')' Stm 'else' Stm { Javalette.Abs.SIfElse $3 $5 $7 }
    | 'while' '(' Exp ')' Stm { Javalette.Abs.SWhile $3 $5 }
    | Exp ';' { Javalette.Abs.SExp $1 }
Item :: { Item }
Item : Ident { Javalette.Abs.NoInit $1 }
     | Ident '=' Exp { Javalette.Abs.Init $1 $3 }
ListItem :: { [Item] }
ListItem : Item { (:[]) $1 } | Item ',' ListItem { (:) $1 $3 }
Type :: { Type }
Type : 'int' { Javalette.Abs.Int }
     | 'double' { Javalette.Abs.Double }
     | 'boolean' { Javalette.Abs.Bool }
     | 'void' { Javalette.Abs.Void }
ListType :: { [Type] }
ListType : {- empty -} { [] }
         | Type { (:[]) $1 }
         | Type ',' ListType { (:) $1 $3 }
Exp6 :: { Exp }
Exp6 : Ident { Javalette.Abs.EId $1 }
     | Integer { Javalette.Abs.EInt $1 }
     | Double { Javalette.Abs.EDouble $1 }
     | 'true' { Javalette.Abs.ETrue }
     | 'false' { Javalette.Abs.EFalse }
     | Ident '(' ListExp ')' { Javalette.Abs.EApp $1 $3 }
     | String { Javalette.Abs.EString $1 }
     | '(' Exp ')' { $2 }
Exp5 :: { Exp }
Exp5 : '-' Exp6 { Javalette.Abs.ENeg $2 }
     | '!' Exp6 { Javalette.Abs.ENot $2 }
     | Exp6 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 MulOp Exp5 { Javalette.Abs.EMul $1 $2 $3 }
     | Exp5 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 AddOp Exp4 { Javalette.Abs.EAdd $1 $2 $3 }
     | Exp4 { $1 }
Exp2 :: { Exp }
Exp2 : Exp2 CmpOp Exp3 { Javalette.Abs.ECmp $1 $2 $3 }
     | Exp3 { $1 }
Exp1 :: { Exp }
Exp1 : Exp2 '&&' Exp1 { Javalette.Abs.EAnd $1 $3 } | Exp2 { $1 }
Exp :: { Exp }
Exp : Exp1 '||' Exp { Javalette.Abs.EOr $1 $3 } | Exp1 { $1 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
AddOp :: { AddOp }
AddOp : '+' { Javalette.Abs.OPlus } | '-' { Javalette.Abs.OMinus }
MulOp :: { MulOp }
MulOp : '*' { Javalette.Abs.OTimes }
      | '/' { Javalette.Abs.ODiv }
      | '%' { Javalette.Abs.OMod }
CmpOp :: { CmpOp }
CmpOp : '<' { Javalette.Abs.OLt }
      | '<=' { Javalette.Abs.OLtEq }
      | '>' { Javalette.Abs.OGt }
      | '>=' { Javalette.Abs.OGtEq }
      | '==' { Javalette.Abs.OEq }
      | '!=' { Javalette.Abs.ONEq }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

