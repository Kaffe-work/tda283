

module Javalette.Abs where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Pdefs [Def]
  deriving (Eq, Ord, Show, Read)

data Def = DFun Type Ident [Arg] Blk
  deriving (Eq, Ord, Show, Read)

data Arg = ADecl Type Ident
  deriving (Eq, Ord, Show, Read)

data Blk = Block [Stm]
  deriving (Eq, Ord, Show, Read)

data Stm
    = Empty
    | SBlock Blk
    | SDecls Type [Item]
    | SInit Ident Exp
    | SIncr Ident
    | SDecr Ident
    | SReturn Exp
    | VRet
    | SIf Exp Stm
    | SIfElse Exp Stm Stm
    | SWhile Exp Stm
    | SExp Exp
  deriving (Eq, Ord, Show, Read)

data Item = NoInit Ident | Init Ident Exp
  deriving (Eq, Ord, Show, Read)

data Type = Int | Doub | Bool | VoIdent | Fun Type [Type]
  deriving (Eq, Ord, Show, Read)

data Exp
    = EVar Ident
    | EInt Integer
    | EDouble Double
    | ETrue
    | EFalse
    | EApp Ident [Exp]
    | EString String
    | ENeg Exp
    | ENot Exp
    | EMul Exp MulOp Exp
    | EAdd Exp AddOp Exp
    | ERel Exp RelOp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
  deriving (Eq, Ord, Show, Read)

data AddOp = OPlus | OMinus
  deriving (Eq, Ord, Show, Read)

data MulOp = OTimes | ODiv | OMod
  deriving (Eq, Ord, Show, Read)

data RelOp = OLt | OLtEq | OGt | OGtEq | OEq | ONeq
  deriving (Eq, Ord, Show, Read)

